package csis1410.SimFlame;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Scanner;


/**
 * Contains methods for saving/loading the state of the world to/from disk
 */
public class Serializer {
   
	// Methods

	/**
	 * Saves the current state of the world to a file.
	 * 
	 * @param world the world to save
	 * @param filename the path of the file to save it to
	 */
	public static void save(World world, String filename) {
		try (PrintWriter writer = new PrintWriter(new FileOutputStream(new File(filename)))) {
			writer.print(serialize(world));
		}catch(FileNotFoundException e) {
			System.out.println("File cannot be found.");
		}
	}

	/**
	 * Loads a previously saved World from a file.
	 * 
	 * @param filename the path of the file to attempt loading
	 * @return the world that was loaded
	 * @return null if filename is not a valid path to an existing file
	 * @return null if filename is valid but deserialization fails
	 */
	/*public static World load(String filename) {
		try (Scanner reader = new Scanner(new FileInputStream(new File(filename)))) {
			ArrayList<Point> fuelList = world.getFuelList();
				fuelList.add(new File(filename));
			for(Point el : fuelList) {
				writer.println(el);
				heatMap[] = heatMap.nextInt();
			}
		}
		catch (FileNotFoundException e) {
			System.out.println("File cannot be found.");
		}

	}*/

	/**
	 * Takes a world and returns a serialized version in a String
	 * 
	 * @param world the world to serialize
	 * @return the serialized version as a String
	 */
	public static String serialize(World world) {
	   /* This version is wrong. The documentation specifies that it should take a world
	    * and return a String. It doesn't say this method should output to a file
	    */
		/*try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(filename))) { // where is the filename argument coming from?
			out.writeObject(); // writeObject is supposed to take a parameter
		} catch (FileNotFoundException e) {
			System.out.println("File not found.");
		} catch (IOException e) {
			System.out.println("IO Exception occurred");
		}*/
	   
	   /* We only want to serialize the fuel, not the heat.
	    * Let's not use the standard object serialization Java provides for us.
	    * Instead, let's just write the coordinates manually
	    */
	   StringBuilder sb = new StringBuilder();
	   for(Point el : world.getFuelSet()) { // foreach loop 
	      sb.append(el.getX() + " " + el.getY() + "\n");
	   }
	   return sb.toString();
	}

	/**
	 * Takes a String following the same specification as those
	 * generated by the {@link #serialize(World) serialize} method.
	 * If the given string follows the proper specification, it deserializes
	 * it into an instance of World.
	 * 
	 * @param string the String to deserialize
	 * @return the world
	 * @return null if deserialization fails
	 */
	/*public static World deserialize(String string) {
		try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(filename))) {
			return() in.readObject();
		} catch (FileNotFoundException e) {
			System.out.println("File not found.");
		} catch (IOException e) {
			System.out.println("IO Exception occurred");
		} catch (ClassNotFoundException e) {
			System.out.println("Class not found.");
		}
		return null;

	}*/
	
}